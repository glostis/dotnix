// Generated by kalamine on 2025-07-24
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 glostis-qwerty.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : glostis-qwerty.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : glostis
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// Custom QWERTY layout adapted for coding and writing in French
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │     │ €   │ «   │ »   │     │     │     │     │     │     │     │ _   │ +   ┃          ┃
  // │     │ 1   │ 2   │ 3   │     │     │     │     │     │     │   ° │ -   │ =   ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
  // ┃        ┃ Q   │ W   │ E   │ R   │ T   │ Y   │ U   │ I   │ O   │ P   │ {   │ }   ┃       ┃
  // ┃ ↹      ┃   à │     │   ê │   ù │   ™ │     │   û │   î │   ô │     │ [   │ ]   ┃       ┃
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
  // ┃         ┃ A   │ S   │ D   │ F   │ G   │ H   │ J   │ K   │ L   │ !   │ "   │ |   ┃      ┃
  // ┃ ⇬       ┃   â │   é │   è │     │     │   ( │   ) │   œ │   ï │**   │ '   │ \   ┃      ┃
  // ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
  // ┃      ┃ |   │ Z   │ X   │ C   │ V   │ B   │ N   │ M   │ ;   │ :   │ ?   ┃               ┃
  // ┃ ⇧    ┃ \   │     │   ë │   ç │   _ │     │   ← │   → │ ,   │ . … │ - — ┃ ⇧             ┃
  // ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  // AltGr layer
  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │     │     │     │     │     │     │     │     │     │     │     │     │     ┃          ┃
  // │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
  // ┃        ┃     │     │     │     │     │     │     │   × │     │     │     │     ┃       ┃
  // ┃ ↹      ┃   ^ │   < │   > │   $ │   % │   @ │   & │   * │     │     │     │     ┃       ┃
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
  // ┃         ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
  // ┃ ⇬       ┃   { │   ( │   ) │   } │   = │   \ │   + │   - │   / │   | │     │     ┃      ┃
  // ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
  // ┃      ┃     │     │     │     │     │     │     │     │     │   . │     ┃               ┃
  // ┃ ⇧    ┃     │   ~ │   [ │   ] │   _ │   # │   | │     │     │   . │     ┃ ⇧             ┃
  // ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  partial alphanumeric_keys modifier_keys
  xkb_symbols "hack" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "Custom QWERTY layout adapted for coding and writing in French";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , EuroSign        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 1 €
    key <AE02> {[ 2               , guillemotleft   , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 2 «
    key <AE03> {[ 3               , guillemotright  , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 3 »
    key <AE04> {[ 4               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 4
    key <AE05> {[ 5               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 5
    key <AE06> {[ 6               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 6
    key <AE07> {[ 7               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 7
    key <AE08> {[ 8               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 8
    key <AE09> {[ 9               , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 9
    key <AE10> {[ 0               , VoidSymbol      , degree          , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 0   °

    // Letters, first row
    key <AD01> {[ q               , Q               , agrave          , Agrave          ],[ asciicircum     , VoidSymbol      ]}; // q Q à À ^
    key <AD02> {[ w               , W               , VoidSymbol      , VoidSymbol      ],[ less            , lessthanequal   ]}; // w W     < ≤
    key <AD03> {[ e               , E               , ecircumflex     , Ecircumflex     ],[ greater         , greaterthanequal]}; // e E ê Ê > ≥
    key <AD04> {[ r               , R               , ugrave          , Ugrave          ],[ dollar          , VoidSymbol      ]}; // r R ù Ù $
    key <AD05> {[ t               , T               , trademark       , VoidSymbol      ],[ percent         , VoidSymbol      ]}; // t T ™   %
    key <AD06> {[ y               , Y               , VoidSymbol      , VoidSymbol      ],[ at              , VoidSymbol      ]}; // y Y     @
    key <AD07> {[ u               , U               , ucircumflex     , Ucircumflex     ],[ ampersand       , VoidSymbol      ]}; // u U û Û &
    key <AD08> {[ i               , I               , icircumflex     , Icircumflex     ],[ asterisk        , multiply        ]}; // i I î Î * ×
    key <AD09> {[ o               , O               , ocircumflex     , Ocircumflex     ],[ VoidSymbol      , VoidSymbol      ]}; // o O ô Ô
    key <AD10> {[ p               , P               , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // p P

    // Letters, second row
    key <AC01> {[ a               , A               , acircumflex     , Acircumflex     ],[ braceleft       , VoidSymbol      ]}; // a A â Â {
    key <AC02> {[ s               , S               , eacute          , Eacute          ],[ parenleft       , VoidSymbol      ]}; // s S é É (
    key <AC03> {[ d               , D               , egrave          , Egrave          ],[ parenright      , VoidSymbol      ]}; // d D è È )
    key <AC04> {[ f               , F               , VoidSymbol      , VoidSymbol      ],[ braceright      , VoidSymbol      ]}; // f F     }
    key <AC05> {[ g               , G               , VoidSymbol      , VoidSymbol      ],[ equal           , VoidSymbol      ]}; // g G     =
    key <AC06> {[ h               , H               , parenleft       , VoidSymbol      ],[ backslash       , VoidSymbol      ]}; // h H (   \ 
    key <AC07> {[ j               , J               , parenright      , VoidSymbol      ],[ plus            , VoidSymbol      ]}; // j J )   +
    key <AC08> {[ k               , K               , oe              , OE              ],[ minus           , VoidSymbol      ]}; // k K œ Œ -
    key <AC09> {[ l               , L               , idiaeresis      , Idiaeresis      ],[ slash           , VoidSymbol      ]}; // l L ï Ï /
    key <AC10> {[ ISO_Level3_Latch, exclam          , VoidSymbol      , VoidSymbol      ],[ bar             , brokenbar       ]}; // ' !     | ¦

    // Letters, third row
    key <AB01> {[ z               , Z               , VoidSymbol      , VoidSymbol      ],[ asciitilde      , VoidSymbol      ]}; // z Z     ~
    key <AB02> {[ x               , X               , ediaeresis      , Ediaeresis      ],[ bracketleft     , VoidSymbol      ]}; // x X ë Ë [
    key <AB03> {[ c               , C               , ccedilla        , Ccedilla        ],[ bracketright    , VoidSymbol      ]}; // c C ç Ç ]
    key <AB04> {[ v               , V               , underscore      , VoidSymbol      ],[ underscore      , VoidSymbol      ]}; // v V _   _
    key <AB05> {[ b               , B               , VoidSymbol      , VoidSymbol      ],[ numbersign      , VoidSymbol      ]}; // b B     #
    key <AB06> {[ n               , N               , leftarrow       , U21D0           ],[ bar             , brokenbar       ]}; // n N ← ⇐ | ¦
    key <AB07> {[ m               , M               , rightarrow      , U21D2           ],[ VoidSymbol      , VoidSymbol      ]}; // m M → ⇒
    key <AB08> {[ comma           , semicolon       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // , ;
    key <AB09> {[ period          , colon           , ellipsis        , VoidSymbol      ],[ period          , period          ]}; // . : …   . .
    key <AB10> {[ minus           , question        , emdash          , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - ? —

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // `
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |

    // Space bar
    key <SPCE> {[ space           , U202F           , U2019           , U2019           ],[ U202F           , nobreakspace    ]}; //     ’ ’

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
